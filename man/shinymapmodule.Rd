% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shintoMapModule.R
\name{shintoMapUI}
\alias{shintoMapUI}
\alias{shintoMapModule}
\title{Shinto Map UI Module}
\usage{
shintoMapUI(id, debugger_panel = FALSE, ...)

shintoMapModule(
  input,
  output,
  session,
  base_map,
  render_not_visible = TRUE,
  border = shiny::reactive(NULL),
  border_weight = 2,
  border_color = "#4f4f4f",
  auto_recenter = FALSE,
  label_function = reactive(function(data, ...) NULL),
  label_params = list(),
  color_default = "#023e8a",
  color_outline = "#FFFFFF",
  toggle_reload = shiny::reactive(TRUE),
  proxy = TRUE,
  layers = list()
)
}
\arguments{
\item{id}{Shiny ID for the module}

\item{debugger_panel}{If TRUE, add a verbatimtextoutput panel showing all shiny input values, handy for debugging}

\item{\dots}{Further arguments passed to \code{\link[=leafletOutput]{leafletOutput()}}, such as \code{height}, \code{width}}

\item{input}{shiny input, do not set}

\item{output}{shiny output, do not set}

\item{session}{shiny session, do not set}

\item{base_map}{Static map (with tiles and view setting) made with \code{\link[=shintoBaseMap]{shintoBaseMap()}}}

\item{render_not_visible}{If TRUE, renders the map even when not visible. Works in tabsetpanels (tab_box),
but does not work in modals! For modals, set render_not_visible = FALSE (map should be rendered only after
the modal is opened)}

\item{border}{Reactive sf dataframe with a polygon used as a border}

\item{border_weight}{Thickness of border polygon}

\item{border_color}{Color of border outline}

\item{auto_recenter}{If TRUE, zooms to area when the border changes (reactively)}

\item{label_function}{Function (with \code{data} and \code{...} as arguments) to make labels. Optional.}

\item{label_params}{List of further arguments to pass to \code{label_function}}

\item{color_default}{Default (fill) color if color is not computed for the layer}

\item{color_outline}{Fixed color of the outline of polygons}

\item{toggle_reload}{Reactive to trigger a reload of the map. Sometimes necessary, such as in modals.}

\item{proxy}{If TRUE (default), uses leafletProxy() to update the map. This is better for performance, but in
some cases (for maps that are hidden), try using proxy = FALSE to avoid certain display bugs.}

\item{layers}{List of reactives (each with a list of settings). See example apps in test/, and Details below}
}
\description{
Shiny module (ui+server), a wrapper around \code{\link[=leaflet]{leaflet()}}, making use of leafletProxy for performance,
and many settings specific for Shinto applications. Includes many fixes for awkward situations with
maps in tabs, modals, hidden/not hidden, etc. Returns a reactive(), with information on what polygon
or point was clicked on. Handy for making your own popups (the leaflet popup is not supported since
it is very limited in use).
}
\details{
The layers argument is quite special, and takes a few arguments. Best to start with the example apps
to understand what is going on. Provide a list of reactives (list(reactive(),reactive())), with each reactive
itself a list with the following components.
\itemize{
\item \code{data} : sf-dataframe with spatial data
\item \code{geo_column} : (optional), the name of the geo-column in the sf-dataframe. If not specified,
uses the active geo column (don't know what that means? Read up on the \code{sf} package!)
\item \code{toggle} :  TRUE or FALSE to show the layer (or not)
\item \code{group} : name of the group for the layer, just like in \code{\link[=leaflet]{leaflet()}}
\item \code{geom} :  how are we plotting the data (one of CircleMarkers, Polygons, and some others but untested/unused)
\item \code{id_column} : which column of \code{data} contains unique row identifiers? Important for clicking/hovering
\item \code{color_column} : (optional) which column of \code{data} will be used to color the map?
\item \code{color_function} : (optional) a list with a few components, see examples.
\item \code{color_outline} :  color for the outline around the points or polygons
\item \code{legend} :  a list controlling the placement of the legend, see examples.
\item \code{weight} : thickness of line around point or polygn
\item \code{opacity} : (optional) the opacity (0-1) of the fill color (not the outline color)
\item \code{stroke} : TRUE/FALSE, whether to plot the outline around polygon or point
\item \code{highlightOptions} : options for highlighting, see \code{\link[leaflet:map-layers]{leaflet::addPolygons()}}
\item \code{radius} (only for circlemarkers) : radius of the points
\item \code{clustering} (only for circlemarkers) : whether to use the clustering option
}

\strong{Colors}
\itemize{
\item if \code{color_column} and \code{color_function} are omitted, \code{color_default} is used to color everything
\item if only \code{color_column} is provided, the column is assumed to contain colors ("#9bc11f")
\item otherwise, \code{color_column} will contain data used to generate colors, using the specs in \code{color_function}
}

\code{color_function} has the following components:
\itemize{
\item \code{palfunction} : the actual function used to generate colors from data (standard: \code{shinto_auto_color}),
can be some function you defined. !! Has to be first component of the list.
\item All other arguments will be sent to the \code{palfunction} defined.
\item If using \code{shinto_auto_color}, that function will use either \code{\link[=binned_numeric_map_color]{binned_numeric_map_color()}} (when data are numeric),
of \code{\link[=factor_map_color]{factor_map_color()}} (when data are factor or character). See help pages there for info.
}
}
